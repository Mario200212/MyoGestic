
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/2_adding_new_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_2_adding_new_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_2_adding_new_model.py:


Adding a new model to MyoGestic
================================

This example shows how to add a new model to MyoGestic.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

MyoGestic makes use of a configuration file to define the models that are available to the user in the GUI.

For ease of use, we have provided a template configuration file that you can use to add your own models
`myogestic/user_config.py`.


.. GENERATED FROM PYTHON SOURCE LINES 14-19

.. code-block:: Python


    # print configuration file
    with open("../myogestic/user_config.py", "r") as f:
        print(f.read())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    from myoverse.datasets.filters.temporal import RMSFilter
    from sklearn.linear_model import LinearRegression, Ridge, LogisticRegression
    from sklearn.multioutput import MultiOutputRegressor

    from myogestic.models.definitions import sklearn_models
    from myogestic.utils.config import CONFIG_REGISTRY

    # Register models
    CONFIG_REGISTRY.register_model(
        "Linear Regressor Per Finger",
        lambda **params: MultiOutputRegressor(LinearRegression(**params)),
        False,
        sklearn_models.save,
        sklearn_models.load,
        sklearn_models.train,
        sklearn_models.predict,
    )

    CONFIG_REGISTRY.register_model(
        "Ridge Regressor Per Finger",
        lambda **params: MultiOutputRegressor(Ridge(**params)),
        False,
        sklearn_models.save,
        sklearn_models.load,
        sklearn_models.train,
        sklearn_models.predict,
    )


    # Register features
    class RMSFilterFixedWindow(RMSFilter):
        def __init__(self, is_output: bool = False, name: str = None):
            super().__init__(window_size=120, is_output=is_output, name=name)


    CONFIG_REGISTRY.register_feature("RMS Small Window", RMSFilterFixedWindow)





.. GENERATED FROM PYTHON SOURCE LINES 20-28

Create a new model
------------------
Let's add a new model to MyoGestic.

.. tip:: While we encourage you to add a new model in `user_config.py`, you can also add it in a separate file and import it in `user_config.py`.

Our model is going to be a Logistic Regression model. We are going to use the `LogisticRegression` class from sklearn.


.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: Python


    from sklearn.linear_model import LogisticRegression









.. GENERATED FROM PYTHON SOURCE LINES 33-38

Add functions to save, load, train, and predict
------------------------------------------------
We can use the `sklearn_models` functions that are already defined in the `myogestic.models.definitions` module.
These should work for most models that are based on sklearn models.


.. GENERATED FROM PYTHON SOURCE LINES 38-50

.. code-block:: Python


    from myogestic.models.definitions import sklearn_models
    import inspect

    print(inspect.getsource(sklearn_models.save))
    print("".join(["-"] * 80))
    print(inspect.getsource(sklearn_models.load))
    print("".join(["-"] * 80))
    print(inspect.getsource(sklearn_models.train))
    print("".join(["-"] * 80))
    print(inspect.getsource(sklearn_models.predict))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    def save(model_path: str, model: object) -> str:
        """
        Save a sklearn model.

        Parameters
        ----------
        model_path: str
            The path to save the model.
        model: Any
            The sklearn model to save.

        Returns
        -------
        str
            The path where the model was saved.

        """
        output_model_path: str = str(model_path).split(".")[0] + "_model" + ".pkl"
        joblib.dump(model, output_model_path)
        return output_model_path

    --------------------------------------------------------------------------------
    def load(model_path: str, _: object) -> object:
        """
        Load a sklearn model.

        Parameters
        ----------
        model_path: str
            The path to load the model.
        _: Any
            A new instance of the sklearn model. This instance is not used to load the model.

        Returns
        -------
        Any
            The loaded sklearn model

        """
        with open(model_path, "rb") as f:
            model = joblib.load(f)
        return model

    --------------------------------------------------------------------------------
    def train(model: object, dataset, is_classifier: bool, _: CustomLogger) -> object:
        """
        Train a sklearn model.

        Parameters
        ----------
        model: Any
            The sklearn model to train.
        dataset
        _: CustomLogger
            The logger to log the training process. This parameter is not used.
        is_classifier: bool
            Whether the model is a classifier.

        Returns
        -------
        Any
            The trained sklearn model.

        """
        x_train = dataset["emg"][()]

        x_train = np.reshape(
            x_train, (x_train.shape[0], x_train.shape[1] * x_train.shape[2])
        )

        if is_classifier:
            y_train = dataset["classes"][()]
        else:
            y_train = dataset["kinematics"][()]
            # add small noise to the target to avoid errors
            y_train[y_train == 0] = np.random.uniform(
                0.0001, 0.001, y_train[y_train == 0].shape
            )

        model.fit(x_train, y_train)
        return model

    --------------------------------------------------------------------------------
    def predict(
        model: object, input: np.ndarray, is_classifier: bool
    ) -> Union[np.ndarray, list[float]]:
        """
        Predict with a sklearn model.

        Parameters
        ----------
        model: Any
            The sklearn model to predict with.
        input: np.ndarray
            The input data to predict.
        is_classifier: bool
            Whether the model is a classifier.

        Returns
        -------
        Union[np.ndarray, list[float]]
            The prediction of the model. If the model is a classifier, the prediction is a np.array.
            Otherwise, the prediction is a list of floats.

        """
        prediction = model.predict(
            np.reshape(input, (input.shape[0], input.shape[1] * input.shape[2]))
        )

        if is_classifier:
            try:
                prediction = prediction[0, 0]
            except IndexError:
                prediction = prediction[0]

            return prediction

        return list(prediction[0])





.. GENERATED FROM PYTHON SOURCE LINES 51-60

Add parameters for the model
----------------------------
Finally, we need to define the parameters that the model needs.

.. note:: The parameters should be divided into `changeable` and `unchangeable` parameters. The `changeable` parameters are the ones that the user can change in the GUI. The `unchangeable` parameters are the ones that the user cannot change and are set by the system.


For our model, we are going to allow 'C' to be a changeable parameters and 'penalty' to be an unchangeable parameter.


.. GENERATED FROM PYTHON SOURCE LINES 60-68

.. code-block:: Python


    # The `ChangeableParameter` and `UnchangeableParameter` classes are used to define the parameters.
    changeable_parameters = {
        "C": {"start_value": 1e-4, "end_value": 1e4, "step": 1e-4, "default_value": 1}
    }

    unchangeable_parameters = {"penalty": "l2"}








.. GENERATED FROM PYTHON SOURCE LINES 69-86

Register the model
------------------
We can now register the model in the configuration registry.

.. note:: The register_model function is used to add a new model to MyoGestic.

The function takes the following arguments:
    - model_name: The name of the model.
    - model_class: The python class of the model. Example: LinearRegression from sklearn.
    - is_classifier: A boolean indicating whether the model is a classifier.
    - save_function: The function to save the model.
    - load_function: The function to load the model.
    - train_function: The function to train the model.
    - predict_function: The function to predict with the model.

.. important:: The model_name must be unique.


.. GENERATED FROM PYTHON SOURCE LINES 86-100

.. code-block:: Python


    from myogestic.utils.config import CONFIG_REGISTRY

    CONFIG_REGISTRY.register_model(
        model_name="Logistic Regression",
        model_class=LogisticRegression,
        is_classifier=True,
        save_function=sklearn_models.save,
        load_function=sklearn_models.load,
        train_function=sklearn_models.train,
        predict_function=sklearn_models.predict,
        changeable_parameters=changeable_parameters,
        unchangeable_parameters=unchangeable_parameters,
    )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.904 seconds)

**Estimated memory usage:**  17 MB


.. _sphx_glr_download_auto_examples_2_adding_new_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 2_adding_new_model.ipynb <2_adding_new_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 2_adding_new_model.py <2_adding_new_model.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
